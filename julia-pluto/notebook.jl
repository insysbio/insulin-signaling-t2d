### A Pluto.jl notebook ###
# v0.18.4

using Markdown
using InteractiveUtils

# ╔═╡ 4067e9ab-1693-4c58-b0ab-99983f90b727
begin
    import Pkg
    # careful: this is _not_ a reproducible environment
    # activate the global environment
    Pkg.activate()

    using HetaSimulator, StatsPlots, NaNMath
end

# ╔═╡ 7021a4a7-86cf-4866-9790-6222cf01e896
md"# Dynamic QSP reporting with Julia and Pluto.jl"

# ╔═╡ b2148ea3-4200-43a6-9449-92f3fad1b67a
md"""
_This is an example of creation of a dynamic QSP report in Julia and Pluto.jl build based on HetaSimulator.jl. The content of this file and modeling platform is published in GitHub repository <https://github.com/insysbio/insulin-signaling-t2d>_
"""

# ╔═╡ 63d5bfbb-f86c-47a9-9c3e-4480ace0cedb
md"""
## Preamble

The QSP model which is used as an example of QSP model was published in the article:

>Brannmark C, Nyman E, Fagerholm S, Bergenholm L, Ekstrand EM, Cedersund G, Stralfors P. Insulin Signaling in Type 2 Diabetes: Experimental and modeling analyses reveal mechanisms of insulin resistance in human adipocytes. Journal of biological chemistry.. 2013 288(14):9867–9880. DOI: 10.1074/jbc.M112.432062

The SBML code was downloaded from BioModels <https://www.ebi.ac.uk/biomodels/BIOMD0000000448> and used as the part of the [Heta-based](https://hetalang.github.io/#/) modeling platform.

The report includes the steps to reproduce simulations from the original article demonstration facilities of the approach and necessary setups.

All necessary files can also be found in [the repository](https://github.com/insysbio/insulin-signaling-t2d).
"""

# ╔═╡ 0f2fec9b-6594-4cbe-8155-f48a4dab3fb7
md"""
## Preparations

For easier creation of the Heta-based platform install [heta compiler](https://hetalang.github.io/#/heta-compiler/?id=installation).

In command line interface run the code below to create heta platform template

```sh
heta init
```
The minimal content will be created.

Download the SBML model [from the database](https://www.ebi.ac.uk/biomodels/BIOMD0000000448) and copy it into `src/BIOMD0000000448.xml`
"""

# ╔═╡ 3d9e61b0-a65b-45f7-a7d9-0b4ef108bbb7
md"""
Update the `src/index.heta` with the following content:

```heta
// load SBML model as a content of the platform
include BIOMD0000000448_url.xml type sbml

// make the records of a model observable
block {output: true} begin
  measuredIRp;
  measuredIRint;
  measuredIRS1p;
  measuredIRS1307;
  measuredPKB308p;
  measuredPKB473p;
  measuredAS160p;
  measuredmTORC1a;
  measuredS6Kp;
  glucoseuptake;
  measuredmTORC2a;
  measuredS6p;
end

// make insulin as an input of the model
insulin @Const = 10; // nM

// make IR (insuline resistance) specific parameters as an input of the model
IR_total @Const = 100;    // reduce to 55%
GLUT4_total @Const = 100; // GLUT4 reduce to 50%
diabetes @Const = 1;      // reduce to 15%

// recalculate initial values for IR and base conditions
IR .= IR_total * 99.87/100; // 99.87
IRp .= 0;
IRins .= 0;
IRip .= IR_total * 0.02/100;      // 0.02
IRi .= IR_total * 0.11/100;       // 0.11
//
GLUT4 .= GLUT4_total * 73.48/100;   // 73.48
GLUT4m .= GLUT4_total * 26.52/100;  // 26.52

// variable parameters
k1a @Const = 0.6331;
k1basal @Const = 0.03683;
k1c @Const = 0.8768;
k1d @Const = 31.01;
```
"""

# ╔═╡ 0c9ee559-bb96-45e9-bd23-49d70e4a82f2
md"""
Install [Julia](https://julialang.org/downloads/) and add all necessary packages in Julia's console:

```julia
] add HetaSimulator StatsPlots NaNMath Pluto
```

Run Pluto notebook engine

```julia
using Pluto
Pluto.run()
```
"""

# ╔═╡ a9bc4164-4d07-4ab6-9e70-cfbcd20fedac
md"""
## Loading platform
"""

# ╔═╡ f25f0e29-7d7d-4496-b4a7-5ad519e06bba
md"""
Pluto.jl has a specific way to load Julia's modules. The default way by `load_platform` doesn't work.

The only way to load is splitting the whole process to three steps as shown: (1) compilation, (2) file update, (3) loading.

Step #2 inputs `using NaNMath` in the beginning as follows:

```julia
#= 
    This code was generated by heta-compiler 0.6.12
=#
using NaNMath

__platform__ = (function()
...
```
"""

# ╔═╡ 063c8aa5-4751-4bb0-9c21-915de8215282
begin
	heta_build("..", julia_only=true, dist_dir="."); # 1. compilation of heta platform
	run(`sed -i '1s/^/using NaNMath \n/' ../_julia/model.jl`); # 2. _julia/model.jl update
	p = load_jlplatform("../_julia/model.jl", rm_out = true)  # 3. loading
end

# ╔═╡ 4218cca2-34ac-4108-a9ee-386f4a0d5662
md"""
Than the platform can be loaded.
"""

# ╔═╡ a783c6e9-a745-4e37-b745-e8366101cf80
m = models(p)[:nameless]

# ╔═╡ 4d7d9426-0743-4a4c-a364-25540f3798ca
md"""
## Default simulation

To simulate the observables only one line of code is required. Here we are using "chain" with `|>` syntax.
"""

# ╔═╡ e1bbe112-09eb-4f7c-a2a9-2a0cba056793
Scenario(m, (0.,30.)) |> sim |> plot

# ╔═╡ 26d95896-75a8-4d85-b935-3f05361ef1bf
md"Based on the original publication the insuline resistance (IR) can be set by updating three parameters."

# ╔═╡ cd5de49c-7d1d-4649-b57e-0fe95aad1f77
Scenario(m, (0.,30.), parameters = [:IR_total=>55., :GLUT4_total=>50, :diabetes=>0.15]) |> sim |> plot

# ╔═╡ da84dbae-be88-4638-956e-055ef056abee
md"""
## Simulation scenarios

Two simulation scenarios above can be created in tabular format and loaded into platform `p`. Create CSV file with the following content:

id | parameters.IR_total | parameters.GLUT4_total | parameters.diabetes | tspan
---|---|---|---|---
base | | | | 30
ir | 55 | 50 | 0.15| 30
"""

# ╔═╡ c0324eb1-1260-47b9-b23e-b0f3f49929c8
scn_csv = read_scenarios("../julia/scenarios.csv") # set csv file location here

# ╔═╡ 22e1278f-56f5-4f15-9666-e7ec538b3bba
add_scenarios!(p, scn_csv)

# ╔═╡ 3ab59992-95c6-4c21-bfda-ff0592a66f76
p

# ╔═╡ 9b23a1a8-e4f4-4b7c-ad1c-ceb110d341ee
md"""
## Advanced visualization

If you need to reshape and visualize different simulation results the easier way is to convert simulation results into `DataFrame`.
"""

# ╔═╡ e86db272-cf1c-4e80-bf43-bbb3ff6ee20b
results_df = sim(p) |> DataFrame # simulate all scenarios, then convert them

# ╔═╡ 2a715514-7c2c-457a-8d69-1a8d8046af5e
md"The following simulations reproduce the figures from the original paper."

# ╔═╡ f236c9c5-b720-4571-a4ff-ec0e12a89795
@df results_df plot(:t, :measuredIRp, group = :scenario, title = "Fig5 1B")

# ╔═╡ e2cca6b5-e9a1-449a-963c-c2c840f14b2e
@df results_df plot(:t, :measuredIRint, group = :scenario, title = "Fig5 1C")

# ╔═╡ a6d9b83b-9fde-4f67-ae3f-a102e5e25b4f
@df results_df plot(:t, :measuredIRS1p, group = :scenario, title = "Fig5 2B")

# ╔═╡ a29e5bee-b745-4bb9-8506-0f8025f7cac0
@df results_df plot(:t, :measuredIRS1307, group = :scenario, title = "Fig5 2C")

# ╔═╡ 80bac958-c5c0-4293-b480-7b3bb095ed49
@df results_df plot(:t, :measuredPKB308p, group = :scenario, title = "Fig5 3B")

# ╔═╡ b75a019f-2b55-4a6f-a8a7-70435a15f0fb
@df results_df plot(:t, :measuredPKB473p, group = :scenario, title = "Fig5 3C")

# ╔═╡ 45344e77-b326-408e-81d7-11de72852eed
md"""
## Titration-like simulations

The simulations of another type (not time dependence) can be performed and visualized by applying different simulation scenarios. For example in the original article the titration-like experiment is simulated: intake of insulin and measurements of different observables after 10 minutes.

To reproduce them the following set of scenarion should be created:

id | parameters.insulin | parameters.IR_total | parameters.GLUT4_total | parameters.diabetes | tspan | parameters.is_titr
---|---|---|---|---|---|---
base_ins_3 | 1.00E-03 | | | | 10 | 1
base_ins_25 | 3.16E-03 | | | | 10 | 1
base_ins_2 | 1.00E-02 | | | | 10 | 1
base_ins_15 | 3.16E-02 | | | | 10 | 1
base_ins_1 | 1.00E-01 | | | | 10 | 1
base_ins_05 | 3.16E-01 | | | | 10 | 1
base_ins0 | 1.00E+00 | | | | 10 | 1
base_ins05 | 3.16E+00 | | | | 10 | 1
base_ins1 | 1.00E+01 | | | | 10 | 1
base_ins15 | 3.16E+01 | | | | 10 | 1
base_ins2 | 1.00E+02 | | | | 10 | 1
ir_ins_3 | 1.00E-03 | 55 | 50 | 0.15| 10 | 1
ir_ins_25 | 3.16E-03 | 55 | 50 | 0.15| 10 | 1
ir_ins_2 | 1.00E-02 | 55 | 50 | 0.15| 10 | 1
ir_ins_15 | 3.16E-02 | 55 | 50 | 0.15| 10 | 1
ir_ins_1 | 1.00E-01 | 55 | 50 | 0.15| 10 | 1
ir_ins_05 | 3.16E-01 | 55 | 50 | 0.15| 10 | 1
ir_ins0 | 1.00E+00 | 55 | 50 | 0.15| 10 | 1
ir_ins05 | 3.16E+00 | 55 | 50 | 0.15| 10 | 1
ir_ins1 | 1.00E+01 | 55 | 50 | 0.15| 10 | 1
ir_ins15 | 3.16E+01 | 55 | 50 | 0.15| 10 | 1
ir_ins2 | 1.00E+02 | 55 | 50 | 0.15| 10 | 1
"""

# ╔═╡ e5721cf5-e4ba-4d45-93b8-d228aab15da0
scn_titr_csv = read_scenarios("../julia/titration.csv")

# ╔═╡ 915c245d-9b03-4fb8-a27a-dc3b958b7b9a
add_scenarios!(p, scn_titr_csv)

# ╔═╡ b24ce74c-ffff-4d46-824a-2b853a006369
results_titr = sim(p, saveat=[10.]);

# ╔═╡ 71c93c6c-8390-4df7-ade7-e23eef29f5ec
results_titr_df = DataFrame(results_titr, add_parameters=true);

# ╔═╡ 47ba0050-6f67-4027-9003-2470cdaced03
results_titr_subset = subset(results_titr_df, :is_titr=>x->x.===1.)

# ╔═╡ 07f91e70-aee0-459e-ba82-1dd01dbbfbf4
@df results_titr_subset plot(
    :insulin, :measuredmTORC2a,
    title = "Fig5 1A",
    xlabel="insulin, nM", ylabel="mTORC2a measured",
    group=:diabetes,
    xscale = :log10,
    legend = :topleft
)

# ╔═╡ 10c479f3-8c8e-4255-9c7c-48fefa78ce7a
md"""
## Multiple simulations

HetaSimulator includes the mechanism to run Monte-Carlo simulations based on parameter variability. For the demonstration purposes we will generate a random set of parameters: `k1a, k1basal, k1c, k1d`. This simulations mimic the uncertainty in the selected parameters.
"""

# ╔═╡ 28cdb580-be40-40d7-b050-3648190a5d83
results_mc = mc(
    p,
    [
        :k1a => LogNormal(0.6331, 0.5),
        :k1basal => LogNormal(0.03683, 0.5),
        :k1c => LogNormal(0.8768, 0.5),
        :k1d => LogNormal(31.01, 0.5)
    ],
    100,                      # number of 
    scenarios = [:base, :ir], # scenarios names to simulate
    saveat = 0:(0.1):30,      # time points
    abstol = 1e-7
)

# ╔═╡ bf064fc2-3d1d-4f62-8218-a1bf3451d1a9
plot(results_mc, vars=[:measuredIRp, :measuredIRint])

# ╔═╡ b30af5e7-35a8-4d74-8ca9-dbfa75fe4f28
md"The generated dataset can be summarized to plot the median and 90% bounds for uncertainty predictions."

# ╔═╡ 7bb1add5-3600-4902-832c-6903e3815b5a
summary_mc = EnsembleSummary(results_mc; quantiles=[0.05,0.95]);

# ╔═╡ 3fd1c38b-472f-4afd-9c41-65f364c078fc
plot(summary_mc, idxs=[1,2]) # to plot observables 1 - IRp, 2 - IRint

# ╔═╡ Cell order:
# ╟─7021a4a7-86cf-4866-9790-6222cf01e896
# ╟─b2148ea3-4200-43a6-9449-92f3fad1b67a
# ╟─63d5bfbb-f86c-47a9-9c3e-4480ace0cedb
# ╟─0f2fec9b-6594-4cbe-8155-f48a4dab3fb7
# ╟─3d9e61b0-a65b-45f7-a7d9-0b4ef108bbb7
# ╟─0c9ee559-bb96-45e9-bd23-49d70e4a82f2
# ╟─a9bc4164-4d07-4ab6-9e70-cfbcd20fedac
# ╠═4067e9ab-1693-4c58-b0ab-99983f90b727
# ╟─f25f0e29-7d7d-4496-b4a7-5ad519e06bba
# ╠═063c8aa5-4751-4bb0-9c21-915de8215282
# ╟─4218cca2-34ac-4108-a9ee-386f4a0d5662
# ╠═a783c6e9-a745-4e37-b745-e8366101cf80
# ╟─4d7d9426-0743-4a4c-a364-25540f3798ca
# ╠═e1bbe112-09eb-4f7c-a2a9-2a0cba056793
# ╟─26d95896-75a8-4d85-b935-3f05361ef1bf
# ╠═cd5de49c-7d1d-4649-b57e-0fe95aad1f77
# ╟─da84dbae-be88-4638-956e-055ef056abee
# ╠═c0324eb1-1260-47b9-b23e-b0f3f49929c8
# ╠═22e1278f-56f5-4f15-9666-e7ec538b3bba
# ╠═3ab59992-95c6-4c21-bfda-ff0592a66f76
# ╟─9b23a1a8-e4f4-4b7c-ad1c-ceb110d341ee
# ╠═e86db272-cf1c-4e80-bf43-bbb3ff6ee20b
# ╟─2a715514-7c2c-457a-8d69-1a8d8046af5e
# ╠═f236c9c5-b720-4571-a4ff-ec0e12a89795
# ╠═e2cca6b5-e9a1-449a-963c-c2c840f14b2e
# ╠═a6d9b83b-9fde-4f67-ae3f-a102e5e25b4f
# ╠═a29e5bee-b745-4bb9-8506-0f8025f7cac0
# ╠═80bac958-c5c0-4293-b480-7b3bb095ed49
# ╠═b75a019f-2b55-4a6f-a8a7-70435a15f0fb
# ╟─45344e77-b326-408e-81d7-11de72852eed
# ╠═e5721cf5-e4ba-4d45-93b8-d228aab15da0
# ╠═915c245d-9b03-4fb8-a27a-dc3b958b7b9a
# ╠═b24ce74c-ffff-4d46-824a-2b853a006369
# ╠═71c93c6c-8390-4df7-ade7-e23eef29f5ec
# ╠═47ba0050-6f67-4027-9003-2470cdaced03
# ╠═07f91e70-aee0-459e-ba82-1dd01dbbfbf4
# ╟─10c479f3-8c8e-4255-9c7c-48fefa78ce7a
# ╠═28cdb580-be40-40d7-b050-3648190a5d83
# ╠═bf064fc2-3d1d-4f62-8218-a1bf3451d1a9
# ╟─b30af5e7-35a8-4d74-8ca9-dbfa75fe4f28
# ╠═7bb1add5-3600-4902-832c-6903e3815b5a
# ╠═3fd1c38b-472f-4afd-9c41-65f364c078fc
