#= 
    This code was generated by heta-compiler 0.6.12
    
=#
using NaNMath

__platform__ = (function()

### create default constants
nameless_constants_num_ = NamedTuple{(
  :diabetes,:insulin,:IR_total,:GLUT4_total,
)}(Float64[
  1,10,100,100,
])

### create default observables
nameless_records_output_ = NamedTuple{(
  :cellvolume,:IR,:IRp,:IRins,:IRip,:IRi,:IRS1,:IRS1p,:IRS1p307,:IRS1307,:X,:Xp,:PKB,:PKB308p,:PKB473p,:PKB308p473p,:mTORC1,:mTORC1a,:mTORC2,:mTORC2a,:AS160,:AS160p,:GLUT4m,:GLUT4,:S6K,:S6Kp,:S6,:S6p,:v1a,:v1basal,:v1c,:v1d,:v1e,:v1g,:v1r,:v2a,:v2b,:v2c,:v2d,:v2f,:v2basal,:v2g,:v3a,:v3b,:v5a,:v5b,:v5c,:v5d,:v4a,:v4b,:v4c,:v4e,:v4f,:v4h,:v6f1,:v6b1,:v7f,:v7b,:v9f1,:v9b1,:v9f2,:v9b2,:k1a,:k1basal,:k1c,:k1d,:k1f,:k1g,:k1r,:k2a,:k2c,:k2basal,:k2b,:k2d,:k2f,:k2g,:k3a,:k3b,:k4a,:k4b,:k4c,:k4e,:k4f,:k4h,:k5a1,:k5a2,:k5b,:k5d,:km5,:k5c,:k6f1,:k6f2,:km6,:n6,:k6b,:k7f,:k7b,:k8,:glut1,:k9f1,:k9b1,:k9f2,:k9b2,:km9,:n9,:scaleIR,:scaleIRS1,:scaleIRS1ds,:scaleIRS1307,:scalePKB308,:scalePKB473,:scaleAS160,:scaleGLUCOSE,:scaleS6K,:scaleS6,:gluc,:measuredIRp,:measuredIRint,:measuredIRS1p,:measuredIRS1307,:measuredPKB308p,:measuredPKB473p,:measuredAS160p,:measuredmTORC1a,:measuredS6Kp,:measuredS6p,:measuredmTORC2a,:glucoseuptake,
)}(Bool[
  false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,
])

### create default events
nameless_events_active_ = NamedTuple{(
  
)}(Bool[
  
])

### initialization of ODE variables and Records
function nameless_init_func_(cons)
    #(diabetes,insulin,IR_total,GLUT4_total,) = cons

    # Heta initialize
    t = 0.0 # initial time
    cellvolume = 1.0
    IR = cons[3] * 99.87 / 100.0
    k1a = 0.6331
    v1a = IR * k1a * cons[2]
    k1basal = 0.03683
    v1basal = k1basal * IR
    IRins = 0.0
    k1c = 0.8768
    v1c = IRins * k1c
    IRp = 0.0
    k1d = 31.01
    v1d = IRp * k1d
    IRip = cons[3] * 0.02 / 100.0
    k1f = 1840.0
    Xp = 0.00166634053318549
    v1e = IRip * k1f * Xp
    k1g = 1944.0
    v1g = IRp * k1g
    IRi = cons[3] * 0.11 / 100.0
    k1r = 0.5471
    v1r = IRi * k1r
    IRS1 = 82.9671997523599
    k2a = 3.227
    v2a = IRS1 * k2a * IRip
    IRS1p = 0.00119481841136737
    k2b = 3424.0
    v2b = IRS1p * k2b
    k2c = 5759.0
    mTORC1a = 13.4997527759726
    v2c = IRS1p * k2c * mTORC1a * cons[1]
    IRS1p307 = 0.327454355438396
    k2d = 280.8
    v2d = IRS1p307 * k2d
    k2f = 2.913
    v2f = IRS1p307 * k2f
    k2basal = 0.04228
    v2basal = IRS1 * k2basal
    IRS1307 = 16.7041510257561
    k2g = 0.2671
    v2g = IRS1307 * k2g
    X = 99.9983336594667
    k3a = 0.001377
    v3a = X * k3a * IRS1p
    k3b = 0.09876
    v3b = Xp * k3b
    mTORC1 = 86.5002472240273
    k5a1 = 1.842
    PKB308p473p = 1.70566051030056
    k5a2 = 0.05506
    PKB308p = 13.2964849666951
    v5a = mTORC1 * (k5a1 * PKB308p473p + k5a2 * PKB308p)
    k5b = 24.83
    v5b = mTORC1a * k5b
    mTORC2 = 99.8478148461591
    k5c = 0.08575
    v5c = mTORC2 * k5c * IRip
    k5d = 1.06
    mTORC2a = 0.152185153840861
    v5d = k5d * mTORC2a
    k4a = 5790.0
    PKB = 68.1806649661901
    v4a = k4a * PKB * IRS1p
    k4b = 34.8
    v4b = k4b * PKB308p
    k4c = 4.456
    v4c = k4c * PKB308p * mTORC2a
    k4e = 42.84
    PKB473p = 16.8171941560617
    v4e = k4e * PKB473p * IRS1p307
    k4f = 143.6
    v4f = k4f * PKB308p473p
    k4h = 0.5361
    v4h = k4h * PKB473p
    AS160 = 83.8141018591099
    k6f1 = 2.652
    k6f2 = 36.93
    n6 = 2.137
    km6 = 30.54
    v6f1 = AS160 * (k6f1 * PKB308p473p + (k6f2 * NaNMath.pow(PKB473p, n6)) / (NaNMath.pow(km6, n6) + NaNMath.pow(PKB473p, n6)))
    AS160p = 16.1858981408903
    k6b = 65.18
    v6b1 = AS160p * k6b
    GLUT4 = cons[4] * 73.48 / 100.0
    k7f = 50.98
    v7f = GLUT4 * k7f * AS160p
    GLUT4m = cons[4] * 26.52 / 100.0
    k7b = 2286.0
    v7b = GLUT4m * k7b
    S6K = 99.2731987219547
    k9f1 = 0.1298
    n9 = 0.9855
    km9 = 5873.0
    v9f1 = (S6K * k9f1 * NaNMath.pow(mTORC1a, n9)) / (NaNMath.pow(km9, n9) + NaNMath.pow(mTORC1a, n9))
    S6Kp = 0.72680127804522
    k9b1 = 0.04441
    v9b1 = S6Kp * k9b1
    S6 = 92.7596420796038
    k9f2 = 3.329
    v9f2 = S6 * k9f2 * S6Kp
    S6p = 7.24035792039603
    k9b2 = 31.0
    v9b2 = S6p * k9b2
    km5 = 2.65
    scaleIRS1ds = 14.892
    scaleGLUCOSE = 0.040513
    scaleIR = 5.2022
    measuredIRp = scaleIR * (IRp + IRip)
    measuredIRint = IRi + IRip
    scaleIRS1 = 0.37615
    measuredIRS1p = scaleIRS1 * (IRS1p + IRS1p307)
    scaleIRS1307 = 0.058663
    measuredIRS1307 = scaleIRS1307 * (IRS1p307 + IRS1307)
    scalePKB308 = 0.043564
    measuredPKB308p = scalePKB308 * (PKB308p + PKB308p473p)
    scalePKB473 = 0.012996
    measuredPKB473p = scalePKB473 * (PKB473p + PKB308p473p)
    scaleAS160 = 0.026656
    measuredAS160p = scaleAS160 * AS160p
    measuredmTORC1a = mTORC1a
    scaleS6K = 0.74654
    measuredS6Kp = scaleS6K * S6Kp
    scaleS6 = 0.11494
    measuredS6p = scaleS6 * S6p
    measuredmTORC2a = mTORC2a
    k8 = 724.2
    gluc = 0.05
    glut1 = 7042.0
    glucoseuptake = k8 * GLUT4m * gluc + glut1 * gluc
    
    # save results

    return (
        Float64[
            IR * cellvolume,
            IRp * cellvolume,
            IRins * cellvolume,
            IRip * cellvolume,
            IRi * cellvolume,
            IRS1 * cellvolume,
            IRS1p * cellvolume,
            IRS1p307 * cellvolume,
            IRS1307 * cellvolume,
            X * cellvolume,
            Xp * cellvolume,
            PKB * cellvolume,
            PKB308p * cellvolume,
            PKB473p * cellvolume,
            PKB308p473p * cellvolume,
            mTORC1 * cellvolume,
            mTORC1a * cellvolume,
            mTORC2 * cellvolume,
            mTORC2a * cellvolume,
            AS160 * cellvolume,
            AS160p * cellvolume,
            GLUT4m * cellvolume,
            GLUT4 * cellvolume,
            S6K * cellvolume,
            S6Kp * cellvolume,
            S6 * cellvolume,
            S6p * cellvolume,
        ],
        Float64[
            cellvolume,
            k1a,
            k1basal,
            k1c,
            k1d,
            k1f,
            k1g,
            k1r,
            k2a,
            k2c,
            k2basal,
            k2b,
            k2d,
            k2f,
            k2g,
            k3a,
            k3b,
            k4a,
            k4b,
            k4c,
            k4e,
            k4f,
            k4h,
            k5a1,
            k5a2,
            k5b,
            k5d,
            km5,
            k5c,
            k6f1,
            k6f2,
            km6,
            n6,
            k6b,
            k7f,
            k7b,
            k8,
            glut1,
            k9f1,
            k9b1,
            k9f2,
            k9b2,
            km9,
            n9,
            scaleIR,
            scaleIRS1,
            scaleIRS1ds,
            scaleIRS1307,
            scalePKB308,
            scalePKB473,
            scaleAS160,
            scaleGLUCOSE,
            scaleS6K,
            scaleS6,
            gluc,
        ]
    )
end

### calculate RHS of ODE
function nameless_ode_func_(du, u, p, t)
    cons = p.constants
    (cellvolume,k1a,k1basal,k1c,k1d,k1f,k1g,k1r,k2a,k2c,k2basal,k2b,k2d,k2f,k2g,k3a,k3b,k4a,k4b,k4c,k4e,k4f,k4h,k5a1,k5a2,k5b,k5d,km5,k5c,k6f1,k6f2,km6,n6,k6b,k7f,k7b,k8,glut1,k9f1,k9b1,k9f2,k9b2,km9,n9,scaleIR,scaleIRS1,scaleIRS1ds,scaleIRS1307,scalePKB308,scalePKB473,scaleAS160,scaleGLUCOSE,scaleS6K,scaleS6,gluc,) = p.static
    (IR_,IRp_,IRins_,IRip_,IRi_,IRS1_,IRS1p_,IRS1p307_,IRS1307_,X_,Xp_,PKB_,PKB308p_,PKB473p_,PKB308p473p_,mTORC1_,mTORC1a_,mTORC2_,mTORC2a_,AS160_,AS160p_,GLUT4m_,GLUT4_,S6K_,S6Kp_,S6_,S6p_,) = u 

    # Heta rules
    IR = IR_ / cellvolume
    v1a = IR * k1a * cons[2]
    v1basal = k1basal * IR
    IRins = IRins_ / cellvolume
    v1c = IRins * k1c
    IRp = IRp_ / cellvolume
    v1d = IRp * k1d
    IRip = IRip_ / cellvolume
    Xp = Xp_ / cellvolume
    v1e = IRip * k1f * Xp
    v1g = IRp * k1g
    IRi = IRi_ / cellvolume
    v1r = IRi * k1r
    IRS1 = IRS1_ / cellvolume
    v2a = IRS1 * k2a * IRip
    IRS1p = IRS1p_ / cellvolume
    v2b = IRS1p * k2b
    mTORC1a = mTORC1a_ / cellvolume
    v2c = IRS1p * k2c * mTORC1a * cons[1]
    IRS1p307 = IRS1p307_ / cellvolume
    v2d = IRS1p307 * k2d
    v2f = IRS1p307 * k2f
    v2basal = IRS1 * k2basal
    IRS1307 = IRS1307_ / cellvolume
    v2g = IRS1307 * k2g
    X = X_ / cellvolume
    v3a = X * k3a * IRS1p
    v3b = Xp * k3b
    mTORC1 = mTORC1_ / cellvolume
    PKB308p473p = PKB308p473p_ / cellvolume
    PKB308p = PKB308p_ / cellvolume
    v5a = mTORC1 * (k5a1 * PKB308p473p + k5a2 * PKB308p)
    v5b = mTORC1a * k5b
    mTORC2 = mTORC2_ / cellvolume
    v5c = mTORC2 * k5c * IRip
    mTORC2a = mTORC2a_ / cellvolume
    v5d = k5d * mTORC2a
    PKB = PKB_ / cellvolume
    v4a = k4a * PKB * IRS1p
    v4b = k4b * PKB308p
    v4c = k4c * PKB308p * mTORC2a
    PKB473p = PKB473p_ / cellvolume
    v4e = k4e * PKB473p * IRS1p307
    v4f = k4f * PKB308p473p
    v4h = k4h * PKB473p
    AS160 = AS160_ / cellvolume
    v6f1 = AS160 * (k6f1 * PKB308p473p + (k6f2 * NaNMath.pow(PKB473p, n6)) / (NaNMath.pow(km6, n6) + NaNMath.pow(PKB473p, n6)))
    AS160p = AS160p_ / cellvolume
    v6b1 = AS160p * k6b
    GLUT4 = GLUT4_ / cellvolume
    v7f = GLUT4 * k7f * AS160p
    GLUT4m = GLUT4m_ / cellvolume
    v7b = GLUT4m * k7b
    S6K = S6K_ / cellvolume
    v9f1 = (S6K * k9f1 * NaNMath.pow(mTORC1a, n9)) / (NaNMath.pow(km9, n9) + NaNMath.pow(mTORC1a, n9))
    S6Kp = S6Kp_ / cellvolume
    v9b1 = S6Kp * k9b1
    S6 = S6_ / cellvolume
    v9f2 = S6 * k9f2 * S6Kp
    S6p = S6p_ / cellvolume
    v9b2 = S6p * k9b2
    
    #p.static .= [cellvolume,k1a,k1basal,k1c,k1d,k1f,k1g,k1r,k2a,k2c,k2basal,k2b,k2d,k2f,k2g,k3a,k3b,k4a,k4b,k4c,k4e,k4f,k4h,k5a1,k5a2,k5b,k5d,km5,k5c,k6f1,k6f2,km6,n6,k6b,k7f,k7b,k8,glut1,k9f1,k9b1,k9f2,k9b2,km9,n9,scaleIR,scaleIRS1,scaleIRS1ds,scaleIRS1307,scalePKB308,scalePKB473,scaleAS160,scaleGLUCOSE,scaleS6K,scaleS6,gluc,]
    du .= [
      -v1a-v1basal+v1g+v1r,  # dIR_/dt
      v1basal+v1c-v1d-v1g,  # dIRp_/dt
      v1a-v1c,  # dIRins_/dt
      v1d-v1e,  # dIRip_/dt
      v1e-v1r,  # dIRi_/dt
      -v2a+v2b-v2basal+v2g,  # dIRS1_/dt
      v2a-v2b-v2c+v2d,  # dIRS1p_/dt
      v2c-v2d-v2f,  # dIRS1p307_/dt
      v2f+v2basal-v2g,  # dIRS1307_/dt
      -v3a+v3b,  # dX_/dt
      v3a-v3b,  # dXp_/dt
      -v4a+v4b+v4h,  # dPKB_/dt
      v4a-v4b-v4c,  # dPKB308p_/dt
      -v4e+v4f-v4h,  # dPKB473p_/dt
      v4c+v4e-v4f,  # dPKB308p473p_/dt
      -v5a+v5b,  # dmTORC1_/dt
      v5a-v5b,  # dmTORC1a_/dt
      -v5c+v5d,  # dmTORC2_/dt
      v5c-v5d,  # dmTORC2a_/dt
      -v6f1+v6b1,  # dAS160_/dt
      v6f1-v6b1,  # dAS160p_/dt
      v7f-v7b,  # dGLUT4m_/dt
      -v7f+v7b,  # dGLUT4_/dt
      -v9f1+v9b1,  # dS6K_/dt
      v9f1-v9b1,  # dS6Kp_/dt
      -v9f2+v9b2,  # dS6_/dt
      v9f2-v9b2,  # dS6p_/dt
    ]
end

### output function
function nameless_saving_generator_(outputIds::Vector{Symbol})
    # XXX: currently force amounts: s1_, s2_ are not supported
    __actual_indexes__ = indexin(outputIds, [:cellvolume,:IR,:IRp,:IRins,:IRip,:IRi,:IRS1,:IRS1p,:IRS1p307,:IRS1307,:X,:Xp,:PKB,:PKB308p,:PKB473p,:PKB308p473p,:mTORC1,:mTORC1a,:mTORC2,:mTORC2a,:AS160,:AS160p,:GLUT4m,:GLUT4,:S6K,:S6Kp,:S6,:S6p,:v1a,:v1basal,:v1c,:v1d,:v1e,:v1g,:v1r,:v2a,:v2b,:v2c,:v2d,:v2f,:v2basal,:v2g,:v3a,:v3b,:v5a,:v5b,:v5c,:v5d,:v4a,:v4b,:v4c,:v4e,:v4f,:v4h,:v6f1,:v6b1,:v7f,:v7b,:v9f1,:v9b1,:v9f2,:v9b2,:k1a,:k1basal,:k1c,:k1d,:k1f,:k1g,:k1r,:k2a,:k2c,:k2basal,:k2b,:k2d,:k2f,:k2g,:k3a,:k3b,:k4a,:k4b,:k4c,:k4e,:k4f,:k4h,:k5a1,:k5a2,:k5b,:k5d,:km5,:k5c,:k6f1,:k6f2,:km6,:n6,:k6b,:k7f,:k7b,:k8,:glut1,:k9f1,:k9b1,:k9f2,:k9b2,:km9,:n9,:scaleIR,:scaleIRS1,:scaleIRS1ds,:scaleIRS1307,:scalePKB308,:scalePKB473,:scaleAS160,:scaleGLUCOSE,:scaleS6K,:scaleS6,:gluc,:measuredIRp,:measuredIRint,:measuredIRS1p,:measuredIRS1307,:measuredPKB308p,:measuredPKB473p,:measuredAS160p,:measuredmTORC1a,:measuredS6Kp,:measuredS6p,:measuredmTORC2a,:glucoseuptake,])
    # check nothing in actual_indexes
    wrongIndexes = findall(x -> x===nothing, __actual_indexes__)
    if length(wrongIndexes) > 0
      wrongIds = outputIds[wrongIndexes]
      throw("Wrong identifiers: $(wrongIds)")
    end

    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (cellvolume,k1a,k1basal,k1c,k1d,k1f,k1g,k1r,k2a,k2c,k2basal,k2b,k2d,k2f,k2g,k3a,k3b,k4a,k4b,k4c,k4e,k4f,k4h,k5a1,k5a2,k5b,k5d,km5,k5c,k6f1,k6f2,km6,n6,k6b,k7f,k7b,k8,glut1,k9f1,k9b1,k9f2,k9b2,km9,n9,scaleIR,scaleIRS1,scaleIRS1ds,scaleIRS1307,scalePKB308,scalePKB473,scaleAS160,scaleGLUCOSE,scaleS6K,scaleS6,gluc,) = integrator.p.static
        (IR_,IRp_,IRins_,IRip_,IRi_,IRS1_,IRS1p_,IRS1p307_,IRS1307_,X_,Xp_,PKB_,PKB308p_,PKB473p_,PKB308p473p_,mTORC1_,mTORC1a_,mTORC2_,mTORC2a_,AS160_,AS160p_,GLUT4m_,GLUT4_,S6K_,S6Kp_,S6_,S6p_,) = u

        # Heta rules
        IR = IR_ / cellvolume
        v1a = IR * k1a * cons[2]
        v1basal = k1basal * IR
        IRins = IRins_ / cellvolume
        v1c = IRins * k1c
        IRp = IRp_ / cellvolume
        v1d = IRp * k1d
        IRip = IRip_ / cellvolume
        Xp = Xp_ / cellvolume
        v1e = IRip * k1f * Xp
        v1g = IRp * k1g
        IRi = IRi_ / cellvolume
        v1r = IRi * k1r
        IRS1 = IRS1_ / cellvolume
        v2a = IRS1 * k2a * IRip
        IRS1p = IRS1p_ / cellvolume
        v2b = IRS1p * k2b
        mTORC1a = mTORC1a_ / cellvolume
        v2c = IRS1p * k2c * mTORC1a * cons[1]
        IRS1p307 = IRS1p307_ / cellvolume
        v2d = IRS1p307 * k2d
        v2f = IRS1p307 * k2f
        v2basal = IRS1 * k2basal
        IRS1307 = IRS1307_ / cellvolume
        v2g = IRS1307 * k2g
        X = X_ / cellvolume
        v3a = X * k3a * IRS1p
        v3b = Xp * k3b
        mTORC1 = mTORC1_ / cellvolume
        PKB308p473p = PKB308p473p_ / cellvolume
        PKB308p = PKB308p_ / cellvolume
        v5a = mTORC1 * (k5a1 * PKB308p473p + k5a2 * PKB308p)
        v5b = mTORC1a * k5b
        mTORC2 = mTORC2_ / cellvolume
        v5c = mTORC2 * k5c * IRip
        mTORC2a = mTORC2a_ / cellvolume
        v5d = k5d * mTORC2a
        PKB = PKB_ / cellvolume
        v4a = k4a * PKB * IRS1p
        v4b = k4b * PKB308p
        v4c = k4c * PKB308p * mTORC2a
        PKB473p = PKB473p_ / cellvolume
        v4e = k4e * PKB473p * IRS1p307
        v4f = k4f * PKB308p473p
        v4h = k4h * PKB473p
        AS160 = AS160_ / cellvolume
        v6f1 = AS160 * (k6f1 * PKB308p473p + (k6f2 * NaNMath.pow(PKB473p, n6)) / (NaNMath.pow(km6, n6) + NaNMath.pow(PKB473p, n6)))
        AS160p = AS160p_ / cellvolume
        v6b1 = AS160p * k6b
        GLUT4 = GLUT4_ / cellvolume
        v7f = GLUT4 * k7f * AS160p
        GLUT4m = GLUT4m_ / cellvolume
        v7b = GLUT4m * k7b
        S6K = S6K_ / cellvolume
        v9f1 = (S6K * k9f1 * NaNMath.pow(mTORC1a, n9)) / (NaNMath.pow(km9, n9) + NaNMath.pow(mTORC1a, n9))
        S6Kp = S6Kp_ / cellvolume
        v9b1 = S6Kp * k9b1
        S6 = S6_ / cellvolume
        v9f2 = S6 * k9f2 * S6Kp
        S6p = S6p_ / cellvolume
        v9b2 = S6p * k9b2
        measuredIRp = scaleIR * (IRp + IRip)
        measuredIRint = IRi + IRip
        measuredIRS1p = scaleIRS1 * (IRS1p + IRS1p307)
        measuredIRS1307 = scaleIRS1307 * (IRS1p307 + IRS1307)
        measuredPKB308p = scalePKB308 * (PKB308p + PKB308p473p)
        measuredPKB473p = scalePKB473 * (PKB473p + PKB308p473p)
        measuredAS160p = scaleAS160 * AS160p
        measuredmTORC1a = mTORC1a
        measuredS6Kp = scaleS6K * S6Kp
        measuredS6p = scaleS6 * S6p
        measuredmTORC2a = mTORC2a
        glucoseuptake = k8 * GLUT4m * gluc + glut1 * gluc
        
        # force amount

        return [cellvolume,IR,IRp,IRins,IRip,IRi,IRS1,IRS1p,IRS1p307,IRS1307,X,Xp,PKB,PKB308p,PKB473p,PKB308p473p,mTORC1,mTORC1a,mTORC2,mTORC2a,AS160,AS160p,GLUT4m,GLUT4,S6K,S6Kp,S6,S6p,v1a,v1basal,v1c,v1d,v1e,v1g,v1r,v2a,v2b,v2c,v2d,v2f,v2basal,v2g,v3a,v3b,v5a,v5b,v5c,v5d,v4a,v4b,v4c,v4e,v4f,v4h,v6f1,v6b1,v7f,v7b,v9f1,v9b1,v9f2,v9b2,k1a,k1basal,k1c,k1d,k1f,k1g,k1r,k2a,k2c,k2basal,k2b,k2d,k2f,k2g,k3a,k3b,k4a,k4b,k4c,k4e,k4f,k4h,k5a1,k5a2,k5b,k5d,km5,k5c,k6f1,k6f2,km6,n6,k6b,k7f,k7b,k8,glut1,k9f1,k9b1,k9f2,k9b2,km9,n9,scaleIR,scaleIRS1,scaleIRS1ds,scaleIRS1307,scalePKB308,scalePKB473,scaleAS160,scaleGLUCOSE,scaleS6K,scaleS6,gluc,measuredIRp,measuredIRint,measuredIRS1p,measuredIRS1307,measuredPKB308p,measuredPKB473p,measuredAS160p,measuredmTORC1a,measuredS6Kp,measuredS6p,measuredmTORC2a,glucoseuptake,][__actual_indexes__]
    end
end

### TIME EVENTS ###

### D EVENTS ###

### STOP EVENTS ###

### event assignments


### MODELS ###

nameless_model_ = (
  nameless_init_func_,
  nameless_ode_func_,
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  nameless_saving_generator_,
  nameless_constants_num_,
  nameless_events_active_,
  nameless_records_output_
)

### OUTPUT ###

return (
  (
    nameless = nameless_model_,
  ),
  (),
  "0.6.12"
)

end
)()